# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
scalar DateTime

# The `BigInt` scalar type represents non-fractional signed whole numeric values.
scalar Long

# The `Upload` scalar type represents a file upload.
scalar Upload

type Pagination {
    total: Int!
    page: Int!
    pageSize: Int!
    pageCount: Int!
}

type ResponseCollectionMeta {
    pagination: Pagination!
}

enum PublicationState {
    LIVE
    PREVIEW
}

input IDFilterInput {
    and: [ID]
    or: [ID]
    not: IDFilterInput
    eq: ID
    eqi: ID
    ne: ID
    startsWith: ID
    endsWith: ID
    contains: ID
    notContains: ID
    containsi: ID
    notContainsi: ID
    gt: ID
    gte: ID
    lt: ID
    lte: ID
    null: Boolean
    notNull: Boolean
    in: [ID]
    notIn: [ID]
    between: [ID]
}

input BooleanFilterInput {
    and: [Boolean]
    or: [Boolean]
    not: BooleanFilterInput
    eq: Boolean
    eqi: Boolean
    ne: Boolean
    startsWith: Boolean
    endsWith: Boolean
    contains: Boolean
    notContains: Boolean
    containsi: Boolean
    notContainsi: Boolean
    gt: Boolean
    gte: Boolean
    lt: Boolean
    lte: Boolean
    null: Boolean
    notNull: Boolean
    in: [Boolean]
    notIn: [Boolean]
    between: [Boolean]
}

input StringFilterInput {
    and: [String]
    or: [String]
    not: StringFilterInput
    eq: String
    eqi: String
    ne: String
    startsWith: String
    endsWith: String
    contains: String
    notContains: String
    containsi: String
    notContainsi: String
    gt: String
    gte: String
    lt: String
    lte: String
    null: Boolean
    notNull: Boolean
    in: [String]
    notIn: [String]
    between: [String]
}

input IntFilterInput {
    and: [Int]
    or: [Int]
    not: IntFilterInput
    eq: Int
    eqi: Int
    ne: Int
    startsWith: Int
    endsWith: Int
    contains: Int
    notContains: Int
    containsi: Int
    notContainsi: Int
    gt: Int
    gte: Int
    lt: Int
    lte: Int
    null: Boolean
    notNull: Boolean
    in: [Int]
    notIn: [Int]
    between: [Int]
}

input LongFilterInput {
    and: [Long]
    or: [Long]
    not: LongFilterInput
    eq: Long
    eqi: Long
    ne: Long
    startsWith: Long
    endsWith: Long
    contains: Long
    notContains: Long
    containsi: Long
    notContainsi: Long
    gt: Long
    gte: Long
    lt: Long
    lte: Long
    null: Boolean
    notNull: Boolean
    in: [Long]
    notIn: [Long]
    between: [Long]
}

input FloatFilterInput {
    and: [Float]
    or: [Float]
    not: FloatFilterInput
    eq: Float
    eqi: Float
    ne: Float
    startsWith: Float
    endsWith: Float
    contains: Float
    notContains: Float
    containsi: Float
    notContainsi: Float
    gt: Float
    gte: Float
    lt: Float
    lte: Float
    null: Boolean
    notNull: Boolean
    in: [Float]
    notIn: [Float]
    between: [Float]
}

input DateTimeFilterInput {
    and: [DateTime]
    or: [DateTime]
    not: DateTimeFilterInput
    eq: DateTime
    eqi: DateTime
    ne: DateTime
    startsWith: DateTime
    endsWith: DateTime
    contains: DateTime
    notContains: DateTime
    containsi: DateTime
    notContainsi: DateTime
    gt: DateTime
    gte: DateTime
    lt: DateTime
    lte: DateTime
    null: Boolean
    notNull: Boolean
    in: [DateTime]
    notIn: [DateTime]
    between: [DateTime]
}

input JSONFilterInput {
    and: [JSON]
    or: [JSON]
    not: JSONFilterInput
    eq: JSON
    eqi: JSON
    ne: JSON
    startsWith: JSON
    endsWith: JSON
    contains: JSON
    notContains: JSON
    containsi: JSON
    notContainsi: JSON
    gt: JSON
    gte: JSON
    lt: JSON
    lte: JSON
    null: Boolean
    notNull: Boolean
    in: [JSON]
    notIn: [JSON]
    between: [JSON]
}

input UploadFileFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    alternativeText: StringFilterInput
    caption: StringFilterInput
    width: IntFilterInput
    height: IntFilterInput
    formats: JSONFilterInput
    hash: StringFilterInput
    ext: StringFilterInput
    mime: StringFilterInput
    size: FloatFilterInput
    url: StringFilterInput
    previewUrl: StringFilterInput
    provider: StringFilterInput
    provider_metadata: JSONFilterInput
    folder: UploadFolderFiltersInput
    folderPath: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UploadFileFiltersInput]
    or: [UploadFileFiltersInput]
    not: UploadFileFiltersInput
}

input UploadFileInput {
    name: String
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String
    ext: String
    mime: String
    size: Float
    url: String
    previewUrl: String
    provider: String
    provider_metadata: JSON
    folder: ID
    folderPath: String
}

type UploadFile {
    name: String!
    alternativeText: String
    caption: String
    width: Int
    height: Int
    formats: JSON
    hash: String!
    ext: String
    mime: String!
    size: Float!
    url: String!
    previewUrl: String
    provider: String!
    provider_metadata: JSON
    related: [GenericMorph]
    createdAt: DateTime
    updatedAt: DateTime
}

type UploadFileEntity {
    id: ID
    attributes: UploadFile
}

type UploadFileEntityResponse {
    data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
    data: [UploadFileEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFileRelationResponseCollection {
    data: [UploadFileEntity!]!
}

input UploadFolderFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    pathId: IntFilterInput
    parent: UploadFolderFiltersInput
    children: UploadFolderFiltersInput
    files: UploadFileFiltersInput
    path: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UploadFolderFiltersInput]
    or: [UploadFolderFiltersInput]
    not: UploadFolderFiltersInput
}

input UploadFolderInput {
    name: String
    pathId: Int
    parent: ID
    children: [ID]
    files: [ID]
    path: String
}

type UploadFolder {
    name: String!
    pathId: Int!
    parent: UploadFolderEntityResponse
    children(
        filters: UploadFolderFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFolderRelationResponseCollection
    files(
        filters: UploadFileFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFileRelationResponseCollection
    path: String!
    createdAt: DateTime
    updatedAt: DateTime
}

type UploadFolderEntity {
    id: ID
    attributes: UploadFolder
}

type UploadFolderEntityResponse {
    data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
    data: [UploadFolderEntity!]!
    meta: ResponseCollectionMeta!
}

type UploadFolderRelationResponseCollection {
    data: [UploadFolderEntity!]!
}

input I18NLocaleFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    code: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [I18NLocaleFiltersInput]
    or: [I18NLocaleFiltersInput]
    not: I18NLocaleFiltersInput
}

type I18NLocale {
    name: String
    code: String
    createdAt: DateTime
    updatedAt: DateTime
}

type I18NLocaleEntity {
    id: ID
    attributes: I18NLocale
}

type I18NLocaleEntityResponse {
    data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
    data: [I18NLocaleEntity!]!
    meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
    id: IDFilterInput
    action: StringFilterInput
    role: UsersPermissionsRoleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UsersPermissionsPermissionFiltersInput]
    or: [UsersPermissionsPermissionFiltersInput]
    not: UsersPermissionsPermissionFiltersInput
}

type UsersPermissionsPermission {
    action: String!
    role: UsersPermissionsRoleEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
    id: ID
    attributes: UsersPermissionsPermission
}

type UsersPermissionsPermissionRelationResponseCollection {
    data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRoleFiltersInput {
    id: IDFilterInput
    name: StringFilterInput
    description: StringFilterInput
    type: StringFilterInput
    permissions: UsersPermissionsPermissionFiltersInput
    users: UsersPermissionsUserFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UsersPermissionsRoleFiltersInput]
    or: [UsersPermissionsRoleFiltersInput]
    not: UsersPermissionsRoleFiltersInput
}

input UsersPermissionsRoleInput {
    name: String
    description: String
    type: String
    permissions: [ID]
    users: [ID]
}

type UsersPermissionsRole {
    name: String!
    description: String
    type: String
    permissions(
        filters: UsersPermissionsPermissionFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsPermissionRelationResponseCollection
    users(
        filters: UsersPermissionsUserFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsUserRelationResponseCollection
    createdAt: DateTime
    updatedAt: DateTime
}

type UsersPermissionsRoleEntity {
    id: ID
    attributes: UsersPermissionsRole
}

type UsersPermissionsRoleEntityResponse {
    data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
    data: [UsersPermissionsRoleEntity!]!
    meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
    id: IDFilterInput
    username: StringFilterInput
    email: StringFilterInput
    provider: StringFilterInput
    password: StringFilterInput
    resetPasswordToken: StringFilterInput
    confirmationToken: StringFilterInput
    confirmed: BooleanFilterInput
    blocked: BooleanFilterInput
    role: UsersPermissionsRoleFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [UsersPermissionsUserFiltersInput]
    or: [UsersPermissionsUserFiltersInput]
    not: UsersPermissionsUserFiltersInput
}

input UsersPermissionsUserInput {
    username: String
    email: String
    provider: String
    password: String
    resetPasswordToken: String
    confirmationToken: String
    confirmed: Boolean
    blocked: Boolean
    role: ID
}

type UsersPermissionsUser {
    username: String!
    email: String!
    provider: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsRoleEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type UsersPermissionsUserEntity {
    id: ID
    attributes: UsersPermissionsUser
}

type UsersPermissionsUserEntityResponse {
    data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
    data: [UsersPermissionsUserEntity!]!
    meta: ResponseCollectionMeta!
}

type UsersPermissionsUserRelationResponseCollection {
    data: [UsersPermissionsUserEntity!]!
}

input DeliveryMethodFiltersInput {
    id: IDFilterInput
    title: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [DeliveryMethodFiltersInput]
    or: [DeliveryMethodFiltersInput]
    not: DeliveryMethodFiltersInput
}

input DeliveryMethodInput {
    title: String
    publishedAt: DateTime
}

type DeliveryMethod {
    title: String!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type DeliveryMethodEntity {
    id: ID
    attributes: DeliveryMethod
}

type DeliveryMethodEntityResponse {
    data: DeliveryMethodEntity
}

type DeliveryMethodEntityResponseCollection {
    data: [DeliveryMethodEntity!]!
    meta: ResponseCollectionMeta!
}

input PlatformFiltersInput {
    id: IDFilterInput
    title: StringFilterInput
    product: ProductFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    and: [PlatformFiltersInput]
    or: [PlatformFiltersInput]
    not: PlatformFiltersInput
}

input PlatformInput {
    title: String
    product: ID
}

type Platform {
    title: String!
    product: ProductEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
}

type PlatformEntity {
    id: ID
    attributes: Platform
}

type PlatformEntityResponse {
    data: PlatformEntity
}

type PlatformEntityResponseCollection {
    data: [PlatformEntity!]!
    meta: ResponseCollectionMeta!
}

type PlatformRelationResponseCollection {
    data: [PlatformEntity!]!
}

input ProductFiltersInput {
    id: IDFilterInput
    title: StringFilterInput
    price: IntFilterInput
    salePrice: IntFilterInput
    product_keys: ProductKeyFiltersInput
    product_category: ProductCategoryFiltersInput
    slug: StringFilterInput
    platforms: PlatformFiltersInput
    views: LongFilterInput
    description: StringFilterInput
    instruction: StringFilterInput
    delivery_method: DeliveryMethodFiltersInput
    product_type: ProductTypeFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ProductFiltersInput]
    or: [ProductFiltersInput]
    not: ProductFiltersInput
}

input ProductInput {
    title: String
    images: [ID]
    price: Int
    salePrice: Int
    product_keys: [ID]
    product_category: ID
    slug: String
    platforms: [ID]
    views: Long
    description: String
    instruction: String
    delivery_method: ID
    product_type: ID
    publishedAt: DateTime
}

type Product {
    title: String!
    images(
        filters: UploadFileFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFileRelationResponseCollection
    price: Int
    salePrice: Int
    product_keys(
        filters: ProductKeyFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): ProductKeyRelationResponseCollection
    product_category: ProductCategoryEntityResponse
    slug: String
    platforms(
        filters: PlatformFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): PlatformRelationResponseCollection
    views: Long
    description: String
    instruction: String
    delivery_method: DeliveryMethodEntityResponse
    product_type: ProductTypeEntityResponse
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ProductEntity {
    id: ID
    attributes: Product
}

type ProductEntityResponse {
    data: ProductEntity
}

type ProductEntityResponseCollection {
    data: [ProductEntity!]!
    meta: ResponseCollectionMeta!
}

type ProductRelationResponseCollection {
    data: [ProductEntity!]!
}

input ProductCategoryFiltersInput {
    id: IDFilterInput
    title: StringFilterInput
    products: ProductFiltersInput
    slug: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ProductCategoryFiltersInput]
    or: [ProductCategoryFiltersInput]
    not: ProductCategoryFiltersInput
}

input ProductCategoryInput {
    title: String
    products: [ID]
    slug: String
    publishedAt: DateTime
}

type ProductCategory {
    title: String!
    products(
        filters: ProductFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): ProductRelationResponseCollection
    slug: String!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ProductCategoryEntity {
    id: ID
    attributes: ProductCategory
}

type ProductCategoryEntityResponse {
    data: ProductCategoryEntity
}

type ProductCategoryEntityResponseCollection {
    data: [ProductCategoryEntity!]!
    meta: ResponseCollectionMeta!
}

input ProductKeyFiltersInput {
    id: IDFilterInput
    key: StringFilterInput
    product: ProductFiltersInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ProductKeyFiltersInput]
    or: [ProductKeyFiltersInput]
    not: ProductKeyFiltersInput
}

input ProductKeyInput {
    key: String
    product: ID
    publishedAt: DateTime
}

type ProductKey {
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ProductKeyEntity {
    id: ID
    attributes: ProductKey
}

type ProductKeyEntityResponse {
    data: ProductKeyEntity
}

type ProductKeyEntityResponseCollection {
    data: [ProductKeyEntity!]!
    meta: ResponseCollectionMeta!
}

type ProductKeyRelationResponseCollection {
    data: [ProductKeyEntity!]!
}

input ProductTypeFiltersInput {
    id: IDFilterInput
    title: StringFilterInput
    createdAt: DateTimeFilterInput
    updatedAt: DateTimeFilterInput
    publishedAt: DateTimeFilterInput
    and: [ProductTypeFiltersInput]
    or: [ProductTypeFiltersInput]
    not: ProductTypeFiltersInput
}

input ProductTypeInput {
    title: String
    publishedAt: DateTime
}

type ProductType {
    title: String!
    createdAt: DateTime
    updatedAt: DateTime
    publishedAt: DateTime
}

type ProductTypeEntity {
    id: ID
    attributes: ProductType
}

type ProductTypeEntityResponse {
    data: ProductTypeEntity
}

type ProductTypeEntityResponseCollection {
    data: [ProductTypeEntity!]!
    meta: ResponseCollectionMeta!
}

union GenericMorph =
    UploadFile
    | UploadFolder
    | I18NLocale
    | UsersPermissionsPermission
    | UsersPermissionsRole
    | UsersPermissionsUser
    | DeliveryMethod
    | Platform
    | Product
    | ProductCategory
    | ProductKey
    | ProductType

input FileInfoInput {
    name: String
    alternativeText: String
    caption: String
}

type UsersPermissionsMe {
    id: ID!
    username: String!
    email: String
    confirmed: Boolean
    blocked: Boolean
    role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
    id: ID!
    name: String!
    description: String
    type: String
}

input UsersPermissionsRegisterInput {
    username: String!
    email: String!
    password: String!
}

input UsersPermissionsLoginInput {
    identifier: String!
    password: String!
    provider: String! = "local"
}

type UsersPermissionsPasswordPayload {
    ok: Boolean!
}

type UsersPermissionsLoginPayload {
    jwt: String
    user: UsersPermissionsMe!
}

type UsersPermissionsCreateRolePayload {
    ok: Boolean!
}

type UsersPermissionsUpdateRolePayload {
    ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
    ok: Boolean!
}

input PaginationArg {
    page: Int
    pageSize: Int
    start: Int
    limit: Int
}

type Query {
    uploadFile(id: ID): UploadFileEntityResponse
    uploadFiles(
        filters: UploadFileFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFileEntityResponseCollection
    uploadFolder(id: ID): UploadFolderEntityResponse
    uploadFolders(
        filters: UploadFolderFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UploadFolderEntityResponseCollection
    i18NLocale(id: ID): I18NLocaleEntityResponse
    i18NLocales(
        filters: I18NLocaleFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): I18NLocaleEntityResponseCollection
    usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
    usersPermissionsRoles(
        filters: UsersPermissionsRoleFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsRoleEntityResponseCollection
    usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
    usersPermissionsUsers(
        filters: UsersPermissionsUserFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): UsersPermissionsUserEntityResponseCollection
    deliveryMethod(id: ID): DeliveryMethodEntityResponse
    deliveryMethods(
        filters: DeliveryMethodFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): DeliveryMethodEntityResponseCollection
    platform(id: ID): PlatformEntityResponse
    platforms(
        filters: PlatformFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
    ): PlatformEntityResponseCollection
    product(id: ID): ProductEntityResponse
    products(
        filters: ProductFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): ProductEntityResponseCollection
    productCategory(id: ID): ProductCategoryEntityResponse
    productCategories(
        filters: ProductCategoryFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): ProductCategoryEntityResponseCollection
    productKey(id: ID): ProductKeyEntityResponse
    productKeys(
        filters: ProductKeyFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): ProductKeyEntityResponseCollection
    productType(id: ID): ProductTypeEntityResponse
    productTypes(
        filters: ProductTypeFiltersInput
        pagination: PaginationArg = {}
        sort: [String] = []
        publicationState: PublicationState = LIVE
    ): ProductTypeEntityResponseCollection
    me: UsersPermissionsMe
}

type Mutation {
    createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
    updateUploadFile(id: ID!, data: UploadFileInput!): UploadFileEntityResponse
    deleteUploadFile(id: ID!): UploadFileEntityResponse
    createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse
    updateUploadFolder(
        id: ID!
        data: UploadFolderInput!
    ): UploadFolderEntityResponse
    deleteUploadFolder(id: ID!): UploadFolderEntityResponse
    createDeliveryMethod(data: DeliveryMethodInput!): DeliveryMethodEntityResponse
    updateDeliveryMethod(
        id: ID!
        data: DeliveryMethodInput!
    ): DeliveryMethodEntityResponse
    deleteDeliveryMethod(id: ID!): DeliveryMethodEntityResponse
    createPlatform(data: PlatformInput!): PlatformEntityResponse
    updatePlatform(id: ID!, data: PlatformInput!): PlatformEntityResponse
    deletePlatform(id: ID!): PlatformEntityResponse
    createProduct(data: ProductInput!): ProductEntityResponse
    updateProduct(id: ID!, data: ProductInput!): ProductEntityResponse
    deleteProduct(id: ID!): ProductEntityResponse
    createProductCategory(
        data: ProductCategoryInput!
    ): ProductCategoryEntityResponse
    updateProductCategory(
        id: ID!
        data: ProductCategoryInput!
    ): ProductCategoryEntityResponse
    deleteProductCategory(id: ID!): ProductCategoryEntityResponse
    createProductKey(data: ProductKeyInput!): ProductKeyEntityResponse
    updateProductKey(id: ID!, data: ProductKeyInput!): ProductKeyEntityResponse
    deleteProductKey(id: ID!): ProductKeyEntityResponse
    createProductType(data: ProductTypeInput!): ProductTypeEntityResponse
    updateProductType(id: ID!, data: ProductTypeInput!): ProductTypeEntityResponse
    deleteProductType(id: ID!): ProductTypeEntityResponse
    upload(
        refId: ID
        ref: String
        field: String
        info: FileInfoInput
        file: Upload!
    ): UploadFileEntityResponse!
    multipleUpload(
        refId: ID
        ref: String
        field: String
        files: [Upload]!
    ): [UploadFileEntityResponse]!
    updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
    removeFile(id: ID!): UploadFileEntityResponse

    # Create a new role
    createUsersPermissionsRole(
        data: UsersPermissionsRoleInput!
    ): UsersPermissionsCreateRolePayload

    # Update an existing role
    updateUsersPermissionsRole(
        id: ID!
        data: UsersPermissionsRoleInput!
    ): UsersPermissionsUpdateRolePayload

    # Delete an existing role
    deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

    # Create a new user
    createUsersPermissionsUser(
        data: UsersPermissionsUserInput!
    ): UsersPermissionsUserEntityResponse!

    # Update an existing user
    updateUsersPermissionsUser(
        id: ID!
        data: UsersPermissionsUserInput!
    ): UsersPermissionsUserEntityResponse!

    # Delete an existing user
    deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!
    login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!

    # Register a user
    register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!

    # Request a reset password token
    forgotPassword(email: String!): UsersPermissionsPasswordPayload

    # Reset user password. Confirm with a code (resetToken from forgotPassword)
    resetPassword(
        password: String!
        passwordConfirmation: String!
        code: String!
    ): UsersPermissionsLoginPayload

    # Change user password. Confirm with the current password.
    changePassword(
        currentPassword: String!
        password: String!
        passwordConfirmation: String!
    ): UsersPermissionsLoginPayload

    # Confirm an email users email address
    emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload
}
